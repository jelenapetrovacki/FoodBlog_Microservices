api:

  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Jelena Petrovaƒçki
      url: https://github.com/jelenapetrovacki
      email: jelenapetrovacki@uns.ac.rs

  meal-composite:

    get-composite-meal:
      description: Returns a composite view of the specified meal id
      notes: |
        # Normal response
        If the requested meal id is found the method will return information regarding:
        1. Base meal information
        1. Comments
        1. Recommended drinks
        1. Ingredients
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        ## Meal id 113
        200 - Ok
        ## Non numerical meal id
        400 - A <b>Bad Request</b> error will be returned
        ## Meal id 13
        404 - A <b>Not Found</b> error will be returned
        ## Negative meal ids
        422 - An <b>Unprocessable Entity</b> error will be returned
        
    create-composite-meal:
      description: Creates a composite meal
      notes: |
        # Normal response
        The composite meal information posted to the API will be splitted up and stored as separate meal-info, ingredient, recommended drink and comment entities.
        # Expected error responses
        1. If a meal with the same mealId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned
    delete-composite-meal:
      description: Deletes a meal composite
      notes: |
        # Normal response
        Entities for meal information, recommended drinks, ingredients and comments related to the specificed mealId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing meal will return <b>200 Ok</b>.
        
server.port: 7000
server.error.include-message: always

app:
  meal-service:
    host: localhost
    port: 7001
  comment-service:
    host: localhost
    port: 7002
  ingredient-service:
    host: localhost
    port: 7003
  recommended-drink-service:
    host: localhost
    port: 7004

logging:
  level:
    root: INFO
    se.magnus: DEBUG
    
---
spring.profiles: docker

server.port: 8081

app:
  meal-service:
    host: meal
    port: 8081
  comment-service:
    host: comment
    port: 8081
  ingredient-service:
    host: ingredient
    port: 8081
  recommended-drink-service:
    host: recommended-drink
    port: 8081

