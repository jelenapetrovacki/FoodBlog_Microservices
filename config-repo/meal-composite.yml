api:

  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Jelena Petrovaƒçki
      url: https://github.com/jelenapetrovacki
      email: jelenapetrovacki@uns.ac.rs

  meal-composite:

    get-composite-meal:
      description: Returns a composite view of the specified meal id
      notes: |
        # Normal response
        If the requested meal id is found the method will return information regarding:
        1. Base meal information
        1. Comments
        1. Recommended drinks
        1. Ingredients
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
        
        # Expected partial and error responses
        1. If no product information is found, a <b>404 - Not Found</b> error will be returned
        1. In no recommendations or reviews are found for a product, a partial response will be returned
        
    create-composite-meal:
      description: Creates a composite meal
      notes: |
        # Normal response
        The composite meal information posted to the API will be splitted up and stored as separate meal-info, ingredient, recommended drink and comment entities.
        # Expected error responses
        1. If a meal with the same mealId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned

    delete-composite-meal:
      description: Deletes a meal composite
      notes: |
        # Normal response
        Entities for meal information, recommended drinks, ingredients and comments related to the specificed mealId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing meal will return <b>200 Ok</b>.
        
server.port: 7000
server.error.include-message: always

ribbon.ServerListRefreshInterval: 5000

ribbon.NFLoadBalancerPingInterval: 5

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    output-meals:
      destination: meals
      producer:
        required-groups: auditGroup
    output-recommendedDrinks:
      destination: recommendedDrinks
      producer:
        required-groups: auditGroup
    output-ingredients:
      destination: ingredients
      producer:
        required-groups: auditGroup
    output-comments:
      destination: comments
      producer:
        required-groups: auditGroup

spring.security.oauth2.resourceserver.jwt.jwk-set-uri: http://${app.auth-server}:9999/.well-known/jwks.json

app.meal-service.timeoutSec: 2

resilience4j.retry:
  backends:
    meal:
      maxRetryAttempts: 3
      waitDuration: 1000
      retryExceptions:
        - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError

management.health.circuitbreakers.enabled: true

resilience4j.circuitbreaker:
  backends:
    meal:
      registerHealthIndicator: true
      ringBufferSizeInClosedState: 5
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
      ringBufferSizeInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      ignoreExceptions:
        - se.magnus.util.exceptions.InvalidInputException
        - se.magnus.util.exceptions.NotFoundException

logging:
  level:
    root: INFO
    se.magnus: DEBUG
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: TRACE

---
spring.profiles: docker

server.port: 8081
---
spring.profiles: streaming_partitioned

spring.cloud.stream.bindings.output-meals.producer:
  partition-key-expression: payload.key
  partition-count: 2

spring.cloud.stream.bindings.output-recommendedDrinks.producer:
  partition-key-expression: payload.key
  partition-count: 2

spring.cloud.stream.bindings.output-ingredients.producer:
  partition-key-expression: payload.key
  partition-count: 2

spring.cloud.stream.bindings.output-comments.producer:
  partition-key-expression: payload.key
  partition-count: 2

---
spring.profiles: kafka

management.health.rabbit.enabled: false
spring.cloud.stream.defaultBinder: kafka